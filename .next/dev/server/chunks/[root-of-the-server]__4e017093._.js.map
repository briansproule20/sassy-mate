{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///Users/briansproule/Coding%20Projects/sassy-mate/app/api/witnesses/petitions/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\nexport const revalidate = 0; // Disable caching for real-time data\n\nexport async function GET() {\n  // Only use Redis in production\n  if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {\n    try {\n      const { kv } = await import(\"@vercel/kv\");\n      \n      // Fetch all petition IDs from Redis list\n      const petitionIds = await kv.lrange(\"petitions\", 0, -1);\n      \n      // Fetch each petition's data\n      const petitions = await Promise.all(\n        petitionIds.map(async (id) => {\n          const petition = await kv.hgetall(`petition:${id}`);\n          return petition ? { id, ...petition } : null;\n        })\n      );\n\n      // Filter out null values and sort by timestamp (newest first)\n      const validPetitions = petitions\n        .filter((p) => p !== null)\n        .sort((a: any, b: any) => b.timestamp - a.timestamp);\n\n      return NextResponse.json({\n        success: true,\n        data: validPetitions,\n      });\n    } catch (error) {\n      console.error(\"Failed to fetch petitions from Redis:\", error);\n    }\n  }\n  \n  // Return empty array for local development\n  return NextResponse.json({\n    success: true,\n    data: [],\n    message: \"Redis not configured - using client-side storage\",\n  });\n}\n\nexport async function POST(request: Request) {\n  const body = await request.json();\n  const { name, reason, goatScore, goatRank } = body;\n\n  if (!name || !reason || goatScore === undefined) {\n    return NextResponse.json(\n      { success: false, error: \"Missing required fields\" },\n      { status: 400 }\n    );\n  }\n\n  // Only use Redis in production\n  if (process.env.KV_REST_API_URL && process.env.KV_REST_API_TOKEN) {\n    try {\n      const { kv } = await import(\"@vercel/kv\");\n      \n      const petitionId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const timestamp = Date.now();\n\n      // Store petition data\n      await kv.hset(`petition:${petitionId}`, {\n        name,\n        reason,\n        goatScore,\n        goatRank: goatRank || \"Witness\",\n        timestamp,\n      });\n\n      // Add petition ID to list\n      await kv.lpush(\"petitions\", petitionId);\n\n      // Update leaderboard (sorted set by points)\n      await kv.zincrby(\"leaderboard\", 10, name);\n\n      // Update user data\n      const existingUser = await kv.hgetall(`user:${name}`);\n      await kv.hset(`user:${name}`, {\n        lastSeen: new Date().toISOString(),\n        petitionCount: (existingUser?.petitionCount as number || 0) + 1,\n      });\n\n      return NextResponse.json({\n        success: true,\n        data: { id: petitionId },\n      });\n    } catch (error) {\n      console.error(\"Failed to create petition in Redis:\", error);\n      return NextResponse.json(\n        { success: false, error: \"Failed to create petition\" },\n        { status: 500 }\n      );\n    }\n  }\n\n  // For local development, return success (client will handle localStorage)\n  return NextResponse.json({\n    success: true,\n    data: { id: Date.now().toString() },\n    message: \"Redis not configured - using client-side storage\",\n  });\n}\n\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEO,MAAM,aAAa,GAAG,qCAAqC;AAE3D,eAAe;IACpB,+BAA+B;IAC/B,IAAI,QAAQ,GAAG,CAAC,eAAe,IAAI,QAAQ,GAAG,CAAC,iBAAiB,EAAE;QAChE,IAAI;YACF,MAAM,EAAE,EAAE,EAAE,GAAG;YAEf,yCAAyC;YACzC,MAAM,cAAc,MAAM,GAAG,MAAM,CAAC,aAAa,GAAG,CAAC;YAErD,6BAA6B;YAC7B,MAAM,YAAY,MAAM,QAAQ,GAAG,CACjC,YAAY,GAAG,CAAC,OAAO;gBACrB,MAAM,WAAW,MAAM,GAAG,OAAO,CAAC,CAAC,SAAS,EAAE,IAAI;gBAClD,OAAO,WAAW;oBAAE;oBAAI,GAAG,QAAQ;gBAAC,IAAI;YAC1C;YAGF,8DAA8D;YAC9D,MAAM,iBAAiB,UACpB,MAAM,CAAC,CAAC,IAAM,MAAM,MACpB,IAAI,CAAC,CAAC,GAAQ,IAAW,EAAE,SAAS,GAAG,EAAE,SAAS;YAErD,OAAO,iKAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM;YACR;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;QACzD;IACF;IAEA,2CAA2C;IAC3C,OAAO,iKAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,MAAM,EAAE;QACR,SAAS;IACX;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG;IAE9C,IAAI,CAAC,QAAQ,CAAC,UAAU,cAAc,WAAW;QAC/C,OAAO,iKAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA0B,GACnD;YAAE,QAAQ;QAAI;IAElB;IAEA,+BAA+B;IAC/B,IAAI,QAAQ,GAAG,CAAC,eAAe,IAAI,QAAQ,GAAG,CAAC,iBAAiB,EAAE;QAChE,IAAI;YACF,MAAM,EAAE,EAAE,EAAE,GAAG;YAEf,MAAM,aAAa,GAAG,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;YAC7E,MAAM,YAAY,KAAK,GAAG;YAE1B,sBAAsB;YACtB,MAAM,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,YAAY,EAAE;gBACtC;gBACA;gBACA;gBACA,UAAU,YAAY;gBACtB;YACF;YAEA,0BAA0B;YAC1B,MAAM,GAAG,KAAK,CAAC,aAAa;YAE5B,4CAA4C;YAC5C,MAAM,GAAG,OAAO,CAAC,eAAe,IAAI;YAEpC,mBAAmB;YACnB,MAAM,eAAe,MAAM,GAAG,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM;YACpD,MAAM,GAAG,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE;gBAC5B,UAAU,IAAI,OAAO,WAAW;gBAChC,eAAe,CAAC,cAAc,iBAA2B,CAAC,IAAI;YAChE;YAEA,OAAO,iKAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM;oBAAE,IAAI;gBAAW;YACzB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uCAAuC;YACrD,OAAO,iKAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA4B,GACrD;gBAAE,QAAQ;YAAI;QAElB;IACF;IAEA,0EAA0E;IAC1E,OAAO,iKAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,MAAM;YAAE,IAAI,KAAK,GAAG,GAAG,QAAQ;QAAG;QAClC,SAAS;IACX;AACF","debugId":null}}]
}