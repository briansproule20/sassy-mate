{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///Users/briansproule/Coding%20Projects/sassy-mate/app/api/witnesses/petitions/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\nexport const revalidate = 0; // Disable caching for real-time data\n\nexport async function GET() {\n  try {\n    const { Redis } = await import(\"@upstash/redis\");\n    \n    // Initialize Redis using environment variables\n    const redis = Redis.fromEnv();\n    \n    // Fetch all petition IDs from Redis list\n    const petitionIds = await redis.lrange(\"petitions\", 0, -1);\n    \n    // Fetch each petition's data\n    const petitions = await Promise.all(\n      petitionIds.map(async (id: string) => {\n        const petition = await redis.hgetall(`petition:${id}`);\n        return petition ? { id, ...petition } : null;\n      })\n    );\n\n    // Filter out null values and sort by timestamp (newest first)\n    const validPetitions = petitions\n      .filter((p) => p !== null)\n      .sort((a: any, b: any) => b.timestamp - a.timestamp);\n\n    return NextResponse.json({\n      success: true,\n      data: validPetitions,\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch petitions from Redis:\", error);\n    return NextResponse.json({\n      success: false,\n      error: \"Failed to fetch petitions\",\n    }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  const body = await request.json();\n  const { name, reason, goatScore, goatRank } = body;\n\n  if (!name || !reason || goatScore === undefined) {\n    return NextResponse.json(\n      { success: false, error: \"Missing required fields\" },\n      { status: 400 }\n    );\n  }\n\n  try {\n    const { Redis } = await import(\"@upstash/redis\");\n    \n    // Initialize Redis using environment variables\n    const redis = Redis.fromEnv();\n    \n    const petitionId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const timestamp = Date.now();\n\n    // Store petition data\n    await redis.hset(`petition:${petitionId}`, {\n      name,\n      reason,\n      goatScore,\n      goatRank: goatRank || \"Witness\",\n      timestamp,\n    });\n\n    // Add petition ID to list\n    await redis.lpush(\"petitions\", petitionId);\n\n    // Update leaderboard (sorted set by points) - use actual goatScore\n    await redis.zincrby(\"leaderboard\", goatScore, name);\n\n    // Update user data\n    const existingUser = await redis.hgetall(`user:${name}`);\n    await redis.hset(`user:${name}`, {\n      lastSeen: new Date().toISOString(),\n      petitionCount: (existingUser?.petitionCount as number || 0) + 1,\n      totalPoints: (existingUser?.totalPoints as number || 0) + goatScore,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: { id: petitionId },\n    });\n  } catch (error) {\n    console.error(\"Failed to create petition in Redis:\", error);\n    return NextResponse.json(\n      { success: false, error: \"Failed to create petition\" },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAEO,MAAM,aAAa,GAAG,qCAAqC;AAE3D,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG;QAElB,+CAA+C;QAC/C,MAAM,QAAQ,MAAM,OAAO;QAE3B,yCAAyC;QACzC,MAAM,cAAc,MAAM,MAAM,MAAM,CAAC,aAAa,GAAG,CAAC;QAExD,6BAA6B;QAC7B,MAAM,YAAY,MAAM,QAAQ,GAAG,CACjC,YAAY,GAAG,CAAC,OAAO;YACrB,MAAM,WAAW,MAAM,MAAM,OAAO,CAAC,CAAC,SAAS,EAAE,IAAI;YACrD,OAAO,WAAW;gBAAE;gBAAI,GAAG,QAAQ;YAAC,IAAI;QAC1C;QAGF,8DAA8D;QAC9D,MAAM,iBAAiB,UACpB,MAAM,CAAC,CAAC,IAAM,MAAM,MACpB,IAAI,CAAC,CAAC,GAAQ,IAAW,EAAE,SAAS,GAAG,EAAE,SAAS;QAErD,OAAO,iKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO,iKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG;IAE9C,IAAI,CAAC,QAAQ,CAAC,UAAU,cAAc,WAAW;QAC/C,OAAO,iKAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA0B,GACnD;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,GAAG;QAElB,+CAA+C;QAC/C,MAAM,QAAQ,MAAM,OAAO;QAE3B,MAAM,aAAa,GAAG,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;QAC7E,MAAM,YAAY,KAAK,GAAG;QAE1B,sBAAsB;QACtB,MAAM,MAAM,IAAI,CAAC,CAAC,SAAS,EAAE,YAAY,EAAE;YACzC;YACA;YACA;YACA,UAAU,YAAY;YACtB;QACF;QAEA,0BAA0B;QAC1B,MAAM,MAAM,KAAK,CAAC,aAAa;QAE/B,mEAAmE;QACnE,MAAM,MAAM,OAAO,CAAC,eAAe,WAAW;QAE9C,mBAAmB;QACnB,MAAM,eAAe,MAAM,MAAM,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM;QACvD,MAAM,MAAM,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE;YAC/B,UAAU,IAAI,OAAO,WAAW;YAChC,eAAe,CAAC,cAAc,iBAA2B,CAAC,IAAI;YAC9D,aAAa,CAAC,cAAc,eAAyB,CAAC,IAAI;QAC5D;QAEA,OAAO,iKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBAAE,IAAI;YAAW;QACzB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,iKAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA4B,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}